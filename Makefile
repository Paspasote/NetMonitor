# directory for debug binary
DEBUGDIR := Debug

# directory for release binary
RELEASEDIR := Release

# output binary
BIN := NetMonitor

# base directory for sources
SRCDIR := src

# include files
INC_DIRS := $(shell find $(SRC_DIRS) -type d)
INC_FLAGS := $(addprefix -I,$(INC_DIRS))

# source files
SRCS := $(shell find $(SRCDIR) -name "*.c" -o -name "*.cpp" -o -name "*.cc" -o -name "*.cxx")
SRCS_NAMES := $(notdir $(SRCS))

# files included in the tarball generated by 'make dist' (e.g. add LICENSE file)
DISTFILES := $(RELEASEDIR)/$(BIN) LICENSE README.md 

# filename of the tar archive generated by 'make dist'
DISTOUTPUT := $(BIN).tgz

# intermediate directory for generated object files
OBJDIR := $(RELEASEDIR)/obj
# intermediate directory for generated dependency files
DEPDIR := .deps

# object files, auto generated from source files
OBJS := $(subst $(SRCDIR)/,,$(patsubst %,$(OBJDIR)/%.o,$(basename $(SRCS))))
# dependency files, auto generated from source files
DEPS := $(subst $(SRCDIR)/,,$(patsubst %,$(DEPDIR)/%.d,$(basename $(SRCS))))

# compilers (at least gcc and clang) don't create the subdirectories automatically
$(shell mkdir -p $(dir $(OBJS)) >/dev/null)
$(shell mkdir -p $(dir $(DEPS)) >/dev/null)

# C compiler
CC := gcc
# C++ compiler
CXX := g++
# linker
LD := gcc
# tar
TAR := tar

# C flags
CFLAGS := -ggdb -pthread
# C++ flags
CXXFLAGS := -pthread
# C/C++ flags
CPPFLAGS := $(INC_FLAGS) -g -Wall -Wextra -pedantic
# linker flags
LDFLAGS := -ggdb
# linker libraries
LDLIBS := -lcurses -lpcap -lpthread
# flags required for dependency generation; passed to compilers
DEPFLAGS = -MT $@ -MD -MP -MF $(DEPDIR)/$*.Td

# compile C source files
COMPILE.c = $(CC) $(DEPFLAGS) $(CFLAGS) $(CPPFLAGS) -c -o $@
# compile C++ source files
COMPILE.cc = $(CXX) $(DEPFLAGS) $(CXXFLAGS) $(CPPFLAGS) -c -o $@
# precompile step
PRECOMPILE =
# postcompile step
POSTCOMPILE = mv -f $(DEPDIR)/$*.Td $(DEPDIR)/$*.d

all: release debug

release: $(RELEASEDIR)/$(BIN)
	$(shell strip --strip-debug $^)
	$(shell strip --strip-debug $(OBJS))

debug: $(DEBUGDIR)/$(BIN)

dist: $(DISTFILES)
	$(TAR) -cvzf $(DISTOUTPUT) $^

.PHONY: clean
clean:
	$(RM) -r $(OBJDIR) $(DEPDIR) $(RELEASEDIR) $(DEBUGDIR)

.PHONY: distclean
distclean: clean
	$(RM) $(DISTOUTPUT)

.PHONY: install
install:
	@echo no install tasks configured

.PHONY: uninstall
uninstall:
	@echo no uninstall tasks configured

.PHONY: check
check:
	@echo no tests configured

.PHONY: list
list:
	@echo $(SRCS)
	@echo $(DEPS)
	@echo $(OBJS)
	@echo $(BIN)
	
.PHONY: help
help:
	@echo available targets: all dist clean distclean install uninstall check

$(RELEASEDIR)/$(BIN): $(OBJS)
	$(shell mkdir -p $(RELEASEDIR) >/dev/null)
	$(LD) -o $@ $^ $(LDFLAGS) $(LDLIBS) 
	
$(DEBUGDIR)/$(BIN): $(OBJS)
	$(shell mkdir -p $(DEBUGDIR) >/dev/null)
	$(LD) -o $@ $^ $(LDFLAGS) $(LDLIBS) 

$(OBJDIR)/%.o: $(SRCDIR)/%.c
$(OBJDIR)/%.o: $(SRCDIR)/%.c $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(COMPILE.c) $<
	$(POSTCOMPILE)

$(OBJDIR)/%.o: $(SRCDIR)/%.cpp
$(OBJDIR)/%.o: $(SRCDIR)/%.cpp $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(COMPILE.cc) $<
	$(POSTCOMPILE)

$(OBJDIR)/%.o: $(SRCDIR)/%.cc
$(OBJDIR)/%.o: $(SRCDIR)/%.cc $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(COMPILE.cc) $<
	$(POSTCOMPILE)

$(OBJDIR)/%.o: $(SRCDIR)/%.cxx
$(OBJDIR)/%.o: $(SRCDIR)/%.cxx $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(COMPILE.cc) $<
	$(POSTCOMPILE)

.PRECIOUS: $(DEPDIR)/%.d
$(DEPDIR)/%.d: ;

-include $(DEPS)